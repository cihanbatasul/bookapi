export interface Grammar {
    elements: Array<GrammarElement>;
}
export interface GrammarElement {
    identifier: string;
    alternatives: Array<GrammarRule>;
}
export type GrammarRule = RuleSequence | RuleGroup | RuleLiteral | RuleReference | RuleCharRange;
export interface RuleSequence {
    type: "sequence";
    rules: Array<GrammarRule>;
}
export interface RuleGroup {
    type: "group";
    rules: RuleSequence;
    multiplicity: "none" | "optional" | "star" | "plus";
}
export interface RuleLiteral {
    type: "literal";
    literal: string;
}
export interface RuleReference {
    type: "reference";
    referee: string;
}
export interface RuleCharRange {
    type: "char-range";
    pattern: RegExp;
}
export declare function isSequence(rule: GrammarRule): rule is RuleSequence;
export declare function isGroup(rule: GrammarRule): rule is RuleGroup;
export declare function isLiteral(rule: GrammarRule): rule is RuleLiteral;
export declare function isReference(rule: GrammarRule): rule is RuleReference;
export declare function isCharRange(rule: GrammarRule): rule is RuleCharRange;
export declare function serializeElement(grammarElement: GrammarElement, declaredTypes: Set<string>): string;
export declare function serializeGrammar(grammar: Grammar): string;
export declare function literal(value: string): RuleLiteral;
export declare function charPattern(pattern: RegExp): RuleCharRange;
export declare function sequence(...values: Array<GrammarRule>): RuleSequence;
export declare function reference(value: string): RuleReference;
export declare function group(rules: RuleSequence, multiplicity: RuleGroup["multiplicity"]): RuleGroup;
