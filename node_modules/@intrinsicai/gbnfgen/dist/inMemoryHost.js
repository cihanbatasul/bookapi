import ts from "typescript";
class InMemoryCompilerHostImpl {
    files = new Map();
    addSource(fileName, code) {
        if (this.files.has(fileName)) {
            throw new Error(`File already exists: ${fileName}`);
        }
        this.files.set(fileName, ts.createSourceFile(fileName, code, ts.ScriptTarget.ESNext));
    }
    getSourceFile = (fileName) => {
        return this.files.get(fileName);
    };
    getDefaultLibFileName = () => "lib.d.ts";
    writeFile = () => {
        throw new Error("writeFile not implemented");
    };
    getCurrentDirectory = () => ".";
    getCanonicalFileName = (fileName) => fileName;
    useCaseSensitiveFileNames = () => true;
    getNewLine = () => `\n`;
    fileExists = (fileName) => this.files.has(fileName);
    readFile = (fileName) => {
        return this.files.get(fileName)?.getFullText();
    };
}
export function createInMemoryCompilerHost() {
    return new InMemoryCompilerHostImpl();
}
